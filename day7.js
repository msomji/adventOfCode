// # 1,0,0,0,99 becomes 2,0,0,0,99 (1 + 1 = 2).
// # 2,3,0,3,99 becomes 2,3,0,6,99 (3 * 2 = 6).
// # 2,4,4,5,99,0 becomes 2,4,4,5,99,9801 (99 * 99 = 9801).
// # 1,1,1,4,99,5,6,0,99 becomes 30,1,1,4,2,5,6,0,99.

// # 1 = +
// # 2 = *
// # 99 = stop
var Combinatorics = require('js-combinatorics');

INPUT = [3,225,1,225,6,6,1100,1,238,225,104,0,1101,91,67,225,1102,67,36,225,1102,21,90,225,2,13,48,224,101,-819,224,224,4,224,1002,223,8,223,101,7,224,224,1,223,224,223,1101,62,9,225,1,139,22,224,101,-166,224,224,4,224,1002,223,8,223,101,3,224,224,1,223,224,223,102,41,195,224,101,-2870,224,224,4,224,1002,223,8,223,101,1,224,224,1,224,223,223,1101,46,60,224,101,-106,224,224,4,224,1002,223,8,223,1001,224,2,224,1,224,223,223,1001,191,32,224,101,-87,224,224,4,224,102,8,223,223,1001,224,1,224,1,223,224,223,1101,76,90,225,1101,15,58,225,1102,45,42,224,101,-1890,224,224,4,224,1002,223,8,223,1001,224,5,224,1,224,223,223,101,62,143,224,101,-77,224,224,4,224,1002,223,8,223,1001,224,4,224,1,224,223,223,1101,55,54,225,1102,70,58,225,1002,17,80,224,101,-5360,224,224,4,224,102,8,223,223,1001,224,3,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1008,677,677,224,102,2,223,223,1005,224,329,1001,223,1,223,1108,677,226,224,1002,223,2,223,1006,224,344,101,1,223,223,107,677,226,224,1002,223,2,223,1006,224,359,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,374,1001,223,1,223,108,226,677,224,1002,223,2,223,1006,224,389,101,1,223,223,7,226,677,224,102,2,223,223,1006,224,404,1001,223,1,223,1108,677,677,224,1002,223,2,223,1005,224,419,101,1,223,223,1008,226,677,224,102,2,223,223,1006,224,434,101,1,223,223,107,226,226,224,102,2,223,223,1005,224,449,1001,223,1,223,1007,677,677,224,1002,223,2,223,1006,224,464,1001,223,1,223,1007,226,226,224,1002,223,2,223,1005,224,479,101,1,223,223,1008,226,226,224,102,2,223,223,1006,224,494,1001,223,1,223,8,226,226,224,102,2,223,223,1006,224,509,101,1,223,223,1107,677,677,224,102,2,223,223,1005,224,524,1001,223,1,223,1108,226,677,224,1002,223,2,223,1006,224,539,101,1,223,223,1107,677,226,224,1002,223,2,223,1006,224,554,101,1,223,223,1007,677,226,224,1002,223,2,223,1005,224,569,101,1,223,223,7,677,226,224,1002,223,2,223,1006,224,584,101,1,223,223,107,677,677,224,1002,223,2,223,1005,224,599,1001,223,1,223,8,226,677,224,1002,223,2,223,1005,224,614,101,1,223,223,7,677,677,224,1002,223,2,223,1006,224,629,1001,223,1,223,1107,226,677,224,1002,223,2,223,1006,224,644,101,1,223,223,108,226,226,224,102,2,223,223,1005,224,659,1001,223,1,223,8,677,226,224,1002,223,2,223,1005,224,674,101,1,223,223,4,223,99,226]
INPUT2 = [3,225,1,225,6,6,1100,1,238,225,104,0,1101,91,67,225,1102,67,36,225,1102,21,90,225,2,13,48,224,101,-819,224,224,4,224,1002,223,8,223,101,7,224,224,1,223,224,223,1101,62,9,225,1,139,22,224,101,-166,224,224,4,224,1002,223,8,223,101,3,224,224,1,223,224,223,102,41,195,224,101,-2870,224,224,4,224,1002,223,8,223,101,1,224,224,1,224,223,223,1101,46,60,224,101,-106,224,224,4,224,1002,223,8,223,1001,224,2,224,1,224,223,223,1001,191,32,224,101,-87,224,224,4,224,102,8,223,223,1001,224,1,224,1,223,224,223,1101,76,90,225,1101,15,58,225,1102,45,42,224,101,-1890,224,224,4,224,1002,223,8,223,1001,224,5,224,1,224,223,223,101,62,143,224,101,-77,224,224,4,224,1002,223,8,223,1001,224,4,224,1,224,223,223,1101,55,54,225,1102,70,58,225,1002,17,80,224,101,-5360,224,224,4,224,102,8,223,223,1001,224,3,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1008,677,677,224,102,2,223,223,1005,224,329,1001,223,1,223,1108,677,226,224,1002,223,2,223,1006,224,344,101,1,223,223,107,677,226,224,1002,223,2,223,1006,224,359,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,374,1001,223,1,223,108,226,677,224,1002,223,2,223,1006,224,389,101,1,223,223,7,226,677,224,102,2,223,223,1006,224,404,1001,223,1,223,1108,677,677,224,1002,223,2,223,1005,224,419,101,1,223,223,1008,226,677,224,102,2,223,223,1006,224,434,101,1,223,223,107,226,226,224,102,2,223,223,1005,224,449,1001,223,1,223,1007,677,677,224,1002,223,2,223,1006,224,464,1001,223,1,223,1007,226,226,224,1002,223,2,223,1005,224,479,101,1,223,223,1008,226,226,224,102,2,223,223,1006,224,494,1001,223,1,223,8,226,226,224,102,2,223,223,1006,224,509,101,1,223,223,1107,677,677,224,102,2,223,223,1005,224,524,1001,223,1,223,1108,226,677,224,1002,223,2,223,1006,224,539,101,1,223,223,1107,677,226,224,1002,223,2,223,1006,224,554,101,1,223,223,1007,677,226,224,1002,223,2,223,1005,224,569,101,1,223,223,7,677,226,224,1002,223,2,223,1006,224,584,101,1,223,223,107,677,677,224,1002,223,2,223,1005,224,599,1001,223,1,223,8,226,677,224,1002,223,2,223,1005,224,614,101,1,223,223,7,677,677,224,1002,223,2,223,1006,224,629,1001,223,1,223,1107,226,677,224,1002,223,2,223,1006,224,644,101,1,223,223,108,226,226,224,102,2,223,223,1005,224,659,1001,223,1,223,8,677,226,224,1002,223,2,223,1005,224,674,101,1,223,223,4,223,99,226]
class Intcode {

    constructor(program, position = 0) {
        this.updatedProgram = program
        this.program = program
        this.position = position
    }

    process (phaseCode, phaseCodeApplied =false, initialInput =0 ) {
        this.phaseCode= phaseCode
        this.initialInput= initialInput
        this.phaseCodeApplied = phaseCodeApplied
        this.initialInputApplied = false
        this.continue = true
        this.solution = undefined
        while(this.continue) {
            if(this.program[this.position] == 99) {

                console.log('you are now donme')
                this.continue = false
                break;
            }
            this.code = "0000000000000000000"+this.program[this.position]
            this.opcode = Number.parseInt(this.code[this.code.length -1])
            this.mode1 = Number.parseInt(this.code[this.code.length -3]) || 0
            this.mode2 = Number.parseInt(this.code[this.code.length -4])|| 0 
            

                this.param1 = this.mode1 === 1 ? Number.parseInt(this.program[this.position +1]) : Number.parseInt(this.program[this.program[this.position +1]])
                this.param2 = this.mode2 === 1 ? Number.parseInt(this.program[this.position+2]) : Number.parseInt(this.program[this.program[this.position+2]])
                
            if (this.opcode === 1){
                this.program[this.program[this.position + 3]] = this.param1 + this.param2
                this.updatedProgram = [...this.program]
                this.position+=4
            }
            else if (this.opcode === 2) {
                this.program[this.program[this.position +3]] = this.param1 * this.param2
                this.updatedProgram = [...this.program]
                this.position+=4
            }
            else if( this.opcode === 3) {
                if(this.phaseCodeApplied) {
                    this.value = this.initialInput
                    this.initialInputApplied = true
                } else {
                    this.value =  this.phaseCode
                    this.phaseCodeApplied = true
                }
                this.program[this.program[this.position+1]] = this.value
                this.updatedProgram = [...this.program]
                this.position+=2
            }
            else if(this.opcode === 4) {
                this.solution = this.param1
                this.position+=2
                break;
            }
            else if(this.opcode === 5) {
                this.position = (this.param1 != 0 )? this.param2 : this.position+=3
                this.updatedProgram = [...this.program]
            }
            else if(this.opcode === 6) {
                this.position = (this.param1 === 0)? this.param2 : this.position+=3
                this.updatedProgram = [...this.program]
            }
            else if(this.opcode === 7) {
                this.program[this.program[this.position + 3]]  =  (this.param1 < this.param2 )? 1 :  0
                this.updatedProgram = [...this.program]
                this.position+=4
            }
            else if(this.opcode === 8) {
                this.program[this.program[this.position + 3]] =  (this.param1 === this.param2) ? 1 : 0
                this.updatedProgram = [...this.program]
                this.position+=4
            }
            else {
                this.continue = false
                console.log('===============')
                break;
            }
        }
        if(this.param1 == 139629729) {
            console.log(` opcode ${this.opcode} this is param 1: ${this.param1}`)
        }
        return {
            program: this.updatedProgram,
            solution: this.param1,
            pointer: this.position,
            isDone: !this.continue

        }
    }
}

// # input2, needs input 1
// program = new Intcode(INPUT2)
// program.process(1)
sorter = (a,b) => {
    if(a>b) {
        return -1
    } else if (b>a) {
        return 1
    } else {
        return 0
    }
}

// //     //part 2

cmb = Combinatorics.permutation([5,6,7,8,9]);
combinations = []
while(a = cmb.next()) {
combinations.push(a)
}
setTimeout(() => {
    // TRIAL = [3,52,1001,52,-5,52,3,53,1,52,56,54,1007,54,5,55,1005,55,26,1001,54,-5,54,1105,1,12,1,53,54,53,1008,54,0,55,1001,55,1,55,2,53,55,53,4,53,1001,56,-1,56,1005,56,6,99,0,0,0,0,10]
    TRIAL = [3,8,1001,8,10,8,105,1,0,0,21,34,51,64,73,98,179,260,341,422,99999,3,9,102,4,9,9,1001,9,4,9,4,9,99,3,9,1001,9,4,9,1002,9,3,9,1001,9,5,9,4,9,99,3,9,101,5,9,9,102,5,9,9,4,9,99,3,9,101,5,9,9,4,9,99,3,9,1002,9,5,9,1001,9,3,9,102,2,9,9,101,5,9,9,1002,9,2,9,4,9,99,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,99,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,99,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,99,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,99]
    // TRIAL = [3,26,1001,26,-4,26,3,27,1002,27,2,27,1,27,26,27,4,27,1001,28,-1,28,1005,28,6,99,0,0,5]
    var foo = combinations.map(combination => {
    // var foo = [[9,8,7,6,5]].map(combination => {
        // state
        let state = {
            5 : {
                "pointer": 0,
                "program": TRIAL,
                "phaseApplied": false
            },
            6 : {
                "pointer": 0,
                "program": TRIAL,
                "phaseApplied": false
            },
            7 : {
                "pointer": 0,
                "program": TRIAL,
                "phaseApplied": false
            },
            8 : {
                "pointer": 0,
                "program": TRIAL,
                "phaseApplied": false
            },
            9 : {
                "pointer": 0,
                "program": TRIAL,
                "phaseApplied": false
            },
        }

        var isDone= false;
        nextInput = 0
        hasReached = false
        solutions = []
        while (!isDone) {
            
            var feedbackLoop = combination.map((phase) => {
                if(isDone) {
                    console.log('already done')
                    console.log('already done')
                }
               program = new Intcode(state[phase]["program"], state[phase]["pointer"]) // done
               let run =  program.process(phase, state[phase]["phaseApplied"], nextInput )
                // console.log(state[phase]["pointer"])

               state[phase]["phaseApplied"] = true
               state[phase]["program"] = run.program
               state[phase]["pointer"] = run.pointer
               nextInput = run.solution
               isDone = run.isDone
               console.log(`solution : ${run.solution}`)
               return run.solution;
           
            })
            solutions.push(...feedbackLoop)
         
           if(feedbackLoop.isDone) {
               console.log("done=========")
               isDone = true
               finalSolution = feedbackLoop.solution
               console.log(finalSolution)
               break;
            }
        }
        return solutions.sort(sorter)[0]
    })
    console.log(foo.sort(sorter)[0])
    }, 3000)








// //     // # 
// // // part 1
// cmb = Combinatorics.permutation([1,2,3,4,0]);
// combinations = []
// while(a = cmb.next()) {
// combinations.push(a)
// }

// setTimeout(() => {
//     // TRIAL = [3,15,3,16,1002,16,10,16,1,16,15,15,4,15,99,0,0] // 43210
//     // TRIAL = [3,23,3,24,1002,24,10,24,1002,23,-1,23,101,5,23,23,1,24,23,23,4,23,99,0,0] //54321
//     // TRIAL = [3,31,3,32,1002,32,10,32,1001,31,-2,31,1007,31,0,33,1002,33,7,33,1,33,31,31,1,32,31,31,4,31,99,0,0,0] //65210
//     // TRIAL = [3,31,3,32,1002,32,10,32,1001,31,-2,31,1007,31,0,33,1002,33,7,33,1,33,31,31,1,32,31,31,4,31,99,0,0,0]
//     TRIAL = [3,8,1001,8,10,8,105,1,0,0,21,34,51,64,73,98,179,260,341,422,99999,3,9,102,4,9,9,1001,9,4,9,4,9,99,3,9,1001,9,4,9,1002,9,3,9,1001,9,5,9,4,9,99,3,9,101,5,9,9,102,5,9,9,4,9,99,3,9,101,5,9,9,4,9,99,3,9,1002,9,5,9,1001,9,3,9,102,2,9,9,101,5,9,9,1002,9,2,9,4,9,99,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,99,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,99,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,99,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,99]
//     TRIAL = [3,31,3,32,1002,32,10,32,1001,31,-2,31,1007,31,0,33,
//         1002,33,7,33,1,33,31,31,1,32,31,31,4,31,99,0,0,0]
//     let foo = combinations.map(combination => {
//         result = combination.reduce((acc,phase) => {
//             program = new Intcode(TRIAL)
//             return program.process(phase, acc.solution)
//         },{solution: 0}).solution
//         return result
//     })
//             console.log(foo.sort(sorter)[0])
//     }, 3000)

